# -*- coding: utf-8 -*-
"""Momentum_Investing_Algo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YT5NS0ehzW0VHt6Mu9xyudcji3RDtaUO
"""

#imports
import pyEX as p
import requests
import pandas as pd
import json
from psaw import PushshiftAPI
import datetime
import numpy as np
import matplotlib.pyplot as plt

#getting list of tickers in S&P500
payload=pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
first_table = payload[0]
second_table = payload[1]

df = first_table
c = p.Client(api_token='pk_853c222d7fa24b82be089db701f23ae7', version='stable')

#adding daily close prices for last year to dataframe
prices = {}
for i in df['Symbol']:
    x = c.chartDF(symbol = i, timeframe = '1y')[['close']]
    lst = []
    for u in x['close']:
        lst.append(u)
    prices[i] = lst

#implements our momentum trading strategy: if stock has been up for past two days, adds its current price to order book as a buy (cash outflow)
#if stock has been down for past two days, adds its curent price to order book as a sell (cash inflow)
def momentum():
    buyPrices = []
    myDict = {}
    for stock in prices.keys():
        lst = prices[stock]
        buyPrices = []
        for i in range(3,len(lst)):
            #if has been up for past two days, buy stock
            if lst[i] > lst[i-1] > lst[i-3]:
                buyPrices.append(-1 * lst[i])
                myDict[stock] = buyPrices
            #if we have at least 1 share, then we can check for selling
            if len(buyPrices) >= 1:
                if lst[i] < lst[i-1] < lst[i-2]:
                    buyPrices.append(lst[i])
                    myDict[stock] = buyPrices
    return myDict

#sums up total of all buy and sell orders to get total dollar value profit or loss made for each ticker
def profitLoss(myDict):
    global pl
    pL = {}
    for stock in myDict.keys():
        lst = myDict[stock]
        pL[stock] = round(sum(lst),2)
    return pL

#generates our list of "meme stocks" by finding tickers that are mentioned on WSB
def memestocks(): 
    api = PushshiftAPI()
    start_time = int(datetime.datetime(2021,1,30).timestamp())
    posts = api.search_submissions(after=start_time,
                                subreddit='wallstreetbets',
                                filter=['url','author', 'title', 'subreddit']
                                )
    #creates list of 500 WSB posts from 1/30/2021 (randomly chosen date in our timeframe)
    myList = []
    for post in posts:
        if len(myList) != 500:
            myList.append(post.title)
        else:
            break
    #counts the number of times each stock is mentioned in the 500 WSB posts
    wsbDict = {}
    for x in range(len(df)):
        stockCount = 0
        for post in myList:
            if df['Security'][x] in post:
                stockCount += 1
            else:
                stockCount = stockCount
        wsbDict[str(df['Symbol'][x])] = stockCount
    #if the ticker is mentioned at least once in the posts, we consider it a "meme stock"
    memeStocks = []
    for key, value in wsbDict.items():
        if value != 0:
            memeStocks.append(key)
    return memeStocks

#calculates total and average S&P500 portfolio return (dollar amount)
def totalReturnFunc(pL):
    totalReturn = 0
    for stock in pL.keys():
        totalReturn += pL[stock]
    avgReturn = totalReturn/len(pL.keys())
    return (totalReturn, avgReturn)

#calculates total and average meme stock portfolio return (dollar amount)
def memeReturnFunction(pL, memeStocks):
    totalReturnMeme = 0
    for stock in pL.keys():
        if stock in memeStocks:
            totalReturnMeme += pL[stock]
    avgReturnMeme = totalReturnMeme/len(memeStocks)
    return (totalReturnMeme, avgReturnMeme)

def Main():
    #calls functions
    
    myDict = momentum()
    pL = profitLoss(myDict)
    memeStocks = memestocks()
    totalReturn, avgReturn = totalReturnFunc(pL)
    totalReturnMeme, avgReturnMeme = memeReturnFunction(pL, memeStocks)
    
    #prints results
    
    print('Our portfolio total return is ${:,}'.format(round(totalReturn,2)))
    print('Our portfolio average return per stock is ${:,}'.format(round(avgReturn, 2)))
    print('Our meme stock portfolio total return is ${:,}'.format(round(totalReturnMeme,2)))
    print('Our meme stock average portfolio return per stock is ${:,}'.format(round(avgReturnMeme,2)))
    if avgReturnMeme > avgReturn:
        print('This indicates that momentum investing is a good trade strategy for meme stocks as compared to the overall market.')
    else:
        print('This indicates that momentum investing is not a good trade strategy for meme stocks specifically.')
        
    #graphs average portfolio and meme portfolio returns
    
    # x-coordinates
    left = [1, 2]
    # heights of bars
    height = [avgReturn, avgReturnMeme]
    # labels for bars
    tick_label = ['Avg. Return Portfolio', 'Avg. Return Meme Stocks']
    # plotting a bar chart
    plt.bar(left, height, tick_label = tick_label,
            width = 0.8, color = ['blue', 'red'])
    # naming the y-axis
    plt.ylabel('Dollar Return')
    # plot title
    plt.title('Portfolio vs Meme Stocks')
    # function to show the plot 
    plt.show()
    
    #allows user to check performance of individual S&P500 ticker and displays result
    
    while True: 
        print('Are you interested in seeing the average performance of an individual stock?')
        ticker = input('Please enter the ticker of a stock in the S&P500: ')
        ticker = ticker.upper()
        if ticker in pL.keys():
            indivReturn = pL[ticker]
            print('The total return of {} is ${:,}'.format(ticker, indivReturn))
            break
        else:
            print('You did not enter a S&P500 stock ticker. Please try again.')
            continue
    if indivReturn > avgReturn:
        print(f'This indicates that momentum investing is a good trade strategy for {ticker}, as compared to the overall market.')
    else:
        print(f'This indicates that momentum investing is not a good trade strategy for {ticker}, as compared to the overall market.')
        
    #graphs individual stock return as compared to average S&P500 return
    
    # x-coordinates
    left = [1, 2]
    # heights of bars
    height = [avgReturn, indivReturn]
    # labels for bars
    tick_label = ['Avg. Return', ticker]
    # plotting a bar chart
    plt.bar(left, height, tick_label = tick_label,
            width = 0.8, color = ['green', 'blue'])
    # naming the y-axis
    plt.ylabel('Dollar Return')
    # plot title
    plt.title('Avg. Return of Portfolio vs Individual Stock')
    # function to show the plot 
    plt.show()

Main()




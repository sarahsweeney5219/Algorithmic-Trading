# -*- coding: utf-8 -*-
"""S&P500_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cZkkC0pXUJHLynfB65ouvUrnDudqZftY
"""

#Build alternative version of S&P 500 Index Fund where each stock is equally
#weighted (instead of by market cap)

import numpy as np
import pandas as pd
import requests
import math

#importing our list of 500 stocks
stocks = pd.read_csv('sp_500_stocks.csv')
stocks

#IEX Cloud Sandbox API key
api_token = 'Tpk_059b97af715d417d9f49f50b51b1c448'

symbol = 'AAPL'
api_url = f'https://sandbox.iexapis.com/stable/stock/{symbol}/quote/?token={api_token}'
data = requests.get(api_url).json()
print(data)

price = data['latestPrice']
market_cap = data['marketCap']

my_columns = ['Ticker', 'Stock Price', 'Market Capitalization', 'Number of Shares to Buy']
df = pd.DataFrame(columns = my_columns)
df

#here using single http request on each iteration - will be SLOW
for stock in stocks['Ticker']:
  api_url = f'https://sandbox.iexapis.com/stable/stock/{stock}/quote/?token={api_token}'
  data = requests.get(api_url).json()
  df = df.append(
      pd.Series(
          [
           stock,
           data['latestPrice'],
           data['marketCap'],
           'N/A'
          ],
          index = my_columns
      ),
      ignore_index = True
  )

df

#batch api call alternative --will be faster-- first need to split up stocks
def chunks(lst,n):
  for i in range(0, len(lst), n):
    yield lst[i:i+n]

symbol_groups = list(chunks(stocks['Ticker'],100))
symbol_strings = []
for i in range(0, len(symbol_groups)):
  symbol_strings.append(','.join(symbol_groups[i]))
df = pd.DataFrame(columns = my_columns)
for symbol_string in symbol_strings:
  batch_api_call_url = f'https://sandbox.iexapis.com/stable/stock/market/batch?symbols={symbol_string}&types=quote&token={api_token}'
  data = requests.get(batch_api_call_url).json()
  for symbol in symbol_string.split(','):
    df = df.append(
        pd.Series(
            [
             symbol,
             data[symbol]['quote']['latestPrice'],
             data[symbol]['quote']['marketCap'],
             'N/A'
            ],
            index = my_columns
        ),
        ignore_index=True
    )

df

while True:
  portfolio_size = input('Enter value of your portfolio:')
  try:
    portfolio_size = float(portfolio_size)
    break
  except ValueError:
    print('Please enter a numeric input.')

position_size = portfolio_size/len(df.index) #len df = # of stocks 
for i in range(0, len(df.index)):
  df.loc[i, 'Number of Shares to Buy'] = math.floor(position_size/df.loc[i, 'Stock Price'] )
df



